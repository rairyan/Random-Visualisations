# -*- coding: utf-8 -*-
"""Generate Area Under Graph.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AXjgOSHrTiYGJCj01L6iEzgh8iWuoEd7
"""

#ChatGPT Generated

import subprocess
import sys

# Define the list of required packages

required_packages = [
    'numpy',
    'matplotlib',
    'scipy',
    'sympy'
]

# Function to check if a package is installed

def is_package_installed(package):
    try:
        __import__(package)
        return True
    except ImportError:
        return False

# Function to install packages

def install_packages(packages):
    for package in packages:
        if not is_package_installed(package):
            print(f"Installing {package}...")
            subprocess.check_call([sys.executable, '-m', 'pip', 'install', package])
        else:
            continue

# Install missing packages

install_packages(required_packages)

import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import quad
from sympy import symbols, sympify, lambdify

def plot_shaded_area(func, x_range=None, y_range=None, respect_to='x'):
    if respect_to == 'x':
        if x_range is None:
            raise ValueError("x_range must be provided when integrating with respect to x.")

        # Create an array of x values within the specified range
        x = np.linspace(x_range[0], x_range[1], 1000)
        y = func(x)

        # Calculate the area under the curve using numerical integration
        area, _ = quad(func, x_range[0], x_range[1])

        # Plot the function
        plt.plot(x, y, label=f'Function: {func.__name__}')

        # Fill the area under the curve
        plt.fill_between(x, y, where=(x >= x_range[0]) & (x <= x_range[1]), color='skyblue', alpha=0.4, label=f'Shaded area = {area:.2f}')

        # Highlight the x-axis
        plt.axhline(0, color='black', linewidth=0.5)

        # Set labels and title
        plt.xlabel('x')
        plt.ylabel('y')
        plt.title(f'Area under the curve w.r.t x-axis from x = {x_range[0]} to x = {x_range[1]}')

    elif respect_to == 'y':
        if y_range is None:
            raise ValueError("y_range must be provided when integrating with respect to y.")
        # Create an array of y values within the specified range
        y = np.linspace(y_range[0], y_range[1], 1000)

        # Calculate the area under the curve using numerical integration
        func_inv = lambda y_val: quad(lambda x: 1 / func(x), 0, y_val)[0]
        area, _ = quad(func_inv, y_range[0], y_range[1])

        # Generate the corresponding x values
        x = np.array([func_inv(y_val) for y_val in y])

        # Plot the function
        plt.plot(x, y, label=f'Function: {func.__name__} (inverse)')

        # Fill the area under the curve
        plt.fill_betweenx(y, x, where=(y >= y_range[0]) & (y <= y_range[1]), color='skyblue', alpha=0.4, label=f'Shaded area = {area:.2f}')

        # Highlight the y-axis
        plt.axvline(0, color='black', linewidth=0.5)

        # Set labels and title
        plt.xlabel('f(y)')
        plt.ylabel('y')
        plt.title(f'Area under the curve w.r.t y-axis from y = {y_range[0]} to y = {y_range[1]}')

    else:
        raise ValueError("respect_to must be either 'x' or 'y'.")

    if min(x) > 0:
        plt.xlim(0, 1.2*max(x))
    else:
        plt.xlim(-1.2*max(x), 1.2*max(x))

    if min(y) > 0:
        plt.ylim(0, 1.2*max(y))
    else:
        plt.ylim(-1.2*max(y), 1.2*max(y))

    # Print the area
    print(f"The shaded area is {area:.2f}")

    print("Script written by Seow Ryan, optimised by ChatGPT")

    plt.text(0.01, 0.01, "RS", ha='left', va='bottom', transform=plt.gca().transAxes, fontsize=10, color='gainsboro')

    # Show the plot
    plt.show()



def main():
    # Step 1: Ask the user for the function they want to graph (using LaTeX notation)
    user_func = input("Enter the function you want to graph (in LaTeX notation, e.g., 'sin(x)', 'x**2 + 3'): ")

    # Convert LaTeX input to a sympy expression
    x, y = symbols('x y')
    func_expr = sympify(user_func)

    # Convert the sympy expression to a lambda function that can be evaluated numerically
    func = lambdify(x, func_expr, 'numpy')

    # Step 2: Ask whether to calculate the area with respect to x or y
    respect_to = input("Do you want to find the area with respect to 'x' or 'y'? (enter 'x' or 'y'): ").strip().lower()

    # Step 3: Ask the user for the range
    if respect_to == 'x':
        x_min = float(input("Enter the minimum value of x: "))
        x_max = float(input("Enter the maximum value of x: "))
        plot_shaded_area(func, x_range=[x_min, x_max], respect_to='x')
    elif respect_to == 'y':
        y_min = float(input("Enter the minimum value of y: "))
        y_max = float(input("Enter the maximum value of y: "))
        plot_shaded_area(func, y_range=[y_min, y_max], respect_to='y')
    else:
        print("Invalid input for respect_to. Please enter 'x' or 'y'.")

if __name__ == "__main__":
    main()

